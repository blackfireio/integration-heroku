#!/usr/bin/env bash
# bin/compile <build-dir> <cache-dir> <env-dir>

# fail fast
set -e

# debug
#set -x

# parse and derive params
BUILD_DIR=$1
CACHE_DIR=$2
ENV_DIR=$3

source "$(dirname $0)/common.sh"

# ----------
# Basic configuration
# ----------
BF_DIR=".blackfire"
BF_BIN_DIR="$BF_DIR/bin"
BF_AGENT_RUN_DIR="$BF_DIR/var/run"
BF_AGENT_SOCKET_FILE="/app/${BF_AGENT_RUN_DIR}/agent.sock"
BF_AGENT_LOG_DIR="$BF_DIR/var/log"
BF_AGENT_CONFIG_FILE="$BF_DIR/etc/agent"
BF_CLIENT_CONFIG_FILE=".blackfire.ini"

BF_BUILD_INSTALL_DIR="$BUILD_DIR/$BF_DIR"
BF_BUILD_BIN_DIR="$BUILD_DIR/$BF_BIN_DIR"
BF_BUILD_AGENT_RUN_DIR="$BUILD_DIR/$BF_AGENT_RUN_DIR"
BF_BUILD_AGENT_CONFIG_FILE="$BUILD_DIR/$BF_AGENT_CONFIG_FILE"
BF_BUILD_CLIENT_CONFIG_FILE="$BUILD_DIR/$BF_CLIENT_CONFIG_FILE"
BF_BUILD_LOG_DIR="$BUILD_DIR/$BF_AGENT_LOG_DIR"
BF_CACHE_DIR="$CACHE_DIR/$BF_DIR"

mkdir -p "$BF_BUILD_INSTALL_DIR" "$BF_BUILD_BIN_DIR" "$BF_BUILD_AGENT_RUN_DIR" "$BF_BUILD_LOG_DIR" "$BF_CACHE_DIR"

BP_DIR=$(cd "$(dirname "${0:-}")"; cd ..; pwd)
cat > $BP_DIR/export <<EOF
export PATH=${BF_BUILD_BIN_DIR}:\$PATH
EOF

# ----------
# Provisioning credentials and settings from config vars.
# Some variables are mandatory and need to be checked.
# ----------
for mandatoryVar in "BLACKFIRE_SERVER_ID" "BLACKFIRE_SERVER_TOKEN" "BLACKFIRE_CLIENT_ID" "BLACKFIRE_CLIENT_TOKEN"
do
  if [ ! -f "$ENV_DIR/$mandatoryVar" ] ; then
    error "$mandatoryVar config variable must be defined!"
  else
    # Assign the config var properly.
    declare $mandatoryVar=$(cat "$ENV_DIR/$mandatoryVar")
  fi
done

# ----------
# Optional config vars
# ----------
BLACKFIRE_LOG_LEVEL="1"
BLACKFIRE_COLLECTOR="https://blackfire.io"
BLACKFIRE_AGENT_SOCKET=unix://${BF_AGENT_SOCKET_FILE}
# Assign new values when applicable (config vars set up in Heroku dashboard).
[ -f "$ENV_DIR/BLACKFIRE_LOG_LEVEL" ] && BLACKFIRE_LOG_LEVEL=$(cat $ENV_DIR/BLACKFIRE_LOG_LEVEL)
[ -f "$ENV_DIR/BLACKFIRE_COLLECTOR" ] && BLACKFIRE_COLLECTOR=$(cat $ENV_DIR/BLACKFIRE_COLLECTOR)
[ -f "$ENV_DIR/BLACKFIRE_AGENT_SOCKET" ] && BLACKFIRE_AGENT_SOCKET=$(cat $ENV_DIR/BLACKFIRE_AGENT_SOCKET)

# ----------
# Install the Blackfire agent and CLI tool
# ----------
topic "Installing the latest version of Blackfire CLI"
curl -s -o blackfire.tar.gz -L https://blackfire.io/api/v1/releases/cli/linux/amd64
tar -xzf blackfire.tar.gz
chmod +x blackfire
cp blackfire ${BF_BUILD_BIN_DIR}/blackfire
rm blackfire.tar.gz blackfire blackfire.sha1

## Configure the Agent and the Client.
topic "Blackfire configuration"
echo "Configuring the agent" | indent
$BF_BUILD_BIN_DIR/blackfire agent:config \
    --server-id=$BLACKFIRE_SERVER_ID \
    --server-token=$BLACKFIRE_SERVER_TOKEN \
    --config=$BF_BUILD_AGENT_CONFIG_FILE \
    --socket=${BLACKFIRE_AGENT_SOCKET} \
    --log-level=${BLACKFIRE_LOG_LEVEL} \
    --collector=${BLACKFIRE_COLLECTOR}

echo "Configuring the client" | indent
$BF_BUILD_BIN_DIR/blackfire client:config \
    --client-id=$BLACKFIRE_CLIENT_ID \
    --client-token=$BLACKFIRE_CLIENT_TOKEN \
    --config=$BF_BUILD_CLIENT_CONFIG_FILE

# ----------
# Provision the startup profile script.
# ----------
topic "Writing profile script"
mkdir -p $BUILD_DIR/.profile.d

cat <<EOF > ${BUILD_DIR}/.profile.d/blackfire-agent.sh
export PATH="/app/${BF_BIN_DIR}:$PATH"
export BLACKFIRE_LOG_FILE="/app/${BF_AGENT_LOG_DIR}/probe.log"
export BLACKFIRE_LOG_LEVEL=\${BLACKFIRE_LOG_LEVEL:-"1"}
export BLACKFIRE_COLLECTOR=\${BLACKFIRE_COLLECTOR:-"https://blackfire.io"}
export BLACKFIRE_ENDPOINT=\${BLACKFIRE_ENDPOINT:-"https://blackfire.io"}
export BLACKFIRE_AGENT_SOCKET="${BLACKFIRE_AGENT_SOCKET}"

if [ ! -S ${BF_AGENT_SOCKET_FILE} ] ; then
  blackfire agent:start \
      --config=/app/${BF_AGENT_CONFIG_FILE} \
      --log-file="/app/${BF_AGENT_LOG_DIR}/agent.log" &
fi
EOF

topic "Blackfire CLI command is now installed."
${BF_BUILD_BIN_DIR}/blackfire version | indent
